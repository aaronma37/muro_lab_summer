/* Software License Agreement (BSD License)
*
* Copyright (c) 2011, Willow Garage, Inc.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
* * Redistributions of source code must retain the above copyright
* notice, this list of conditions and the following disclaimer.
* * Redistributions in binary form must reproduce the above
* copyright notice, this list of conditions and the following
* disclaimer in the documentation and/or other materials provided
* with the distribution.
* * Neither the name of Willow Garage, Inc. nor the names of its
* contributors may be used to endorse or promote products derived
* from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
* BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
* ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*
* Auto-generated by genmsg_cpp from file /home/kliu/catkin_ws/src/lab/in-progress/deployment/turtlebot_deployment/msg/PoseWithName.msg
*
*/
#ifndef TURTLEBOT_DEPLOYMENT_MESSAGE_POSEWITHNAME_H
#define TURTLEBOT_DEPLOYMENT_MESSAGE_POSEWITHNAME_H
#include <string>
#include <vector>
#include <map>
#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>
#include <geometry_msgs/Pose.h>
namespace turtlebot_deployment
{
template <class ContainerAllocator>
struct PoseWithName_
{
typedef PoseWithName_<ContainerAllocator> Type;
PoseWithName_()
: name()
, pose() {
}
PoseWithName_(const ContainerAllocator& _alloc)
: name(_alloc)
, pose(_alloc) {
}
typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > _name_type;
_name_type name;
typedef ::geometry_msgs::Pose_<ContainerAllocator> _pose_type;
_pose_type pose;
typedef boost::shared_ptr< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> > Ptr;
typedef boost::shared_ptr< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> const> ConstPtr;
boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PoseWithName_
typedef ::turtlebot_deployment::PoseWithName_<std::allocator<void> > PoseWithName;
typedef boost::shared_ptr< ::turtlebot_deployment::PoseWithName > PoseWithNamePtr;
typedef boost::shared_ptr< ::turtlebot_deployment::PoseWithName const> PoseWithNameConstPtr;
// constants requiring out of line definition
template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlebot_deployment::PoseWithName_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >::stream(s, "", v);
return s;
}
} // namespace turtlebot_deployment
namespace ros
{
namespace message_traits
{
// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'turtlebot_deployment': ['/home/kliu/catkin_ws/src/lab/in-progress/deployment/turtlebot_deployment/msg']}
// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']
template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
: FalseType
{ };
template <class ContainerAllocator>
struct IsFixedSize< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> const>
: FalseType
{ };
template <class ContainerAllocator>
struct IsMessage< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
: TrueType
{ };
template <class ContainerAllocator>
struct IsMessage< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> const>
: TrueType
{ };
template <class ContainerAllocator>
struct HasHeader< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
: FalseType
{ };
template <class ContainerAllocator>
struct HasHeader< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> const>
: FalseType
{ };
template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
{
static const char* value()
{
return "177d54286ddeee12eba514054bddffd5";
}
static const char* value(const ::turtlebot_deployment::PoseWithName_<ContainerAllocator>&) { return value(); }
static const uint64_t static_value1 = 0x177d54286ddeee12ULL;
static const uint64_t static_value2 = 0xeba514054bddffd5ULL;
};
template<class ContainerAllocator>
struct DataType< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
{
static const char* value()
{
return "turtlebot_deployment/PoseWithName";
}
static const char* value(const ::turtlebot_deployment::PoseWithName_<ContainerAllocator>&) { return value(); }
};
template<class ContainerAllocator>
struct Definition< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
{
static const char* value()
{
return "string name\n\
geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
}
static const char* value(const ::turtlebot_deployment::PoseWithName_<ContainerAllocator>&) { return value(); }
};
} // namespace message_traits
} // namespace ros
namespace ros
{
namespace serialization
{
template<class ContainerAllocator> struct Serializer< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
{
template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
{
stream.next(m.name);
stream.next(m.pose);
}
ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PoseWithName_
} // namespace serialization
} // namespace ros
namespace ros
{
namespace message_operations
{
template<class ContainerAllocator>
struct Printer< ::turtlebot_deployment::PoseWithName_<ContainerAllocator> >
{
template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlebot_deployment::PoseWithName_<ContainerAllocator>& v)
{
s << indent << "name: ";
Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + " ", v.name);
s << indent << "pose: ";
s << std::endl;
Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + " ", v.pose);
}
};
} // namespace message_operations
} // namespace ros
#endif // TURTLEBOT_DEPLOYMENT_MESSAGE_POSEWITHNAME_H
